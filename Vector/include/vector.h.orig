#ifndef VECTOR_H_
#  define VECTOR_H_
#  ifdef DLLLIB
#    ifdef BUILDING_DLL
#      define DLLIMPORT __declspec(dllexport)
#    else
#      define DLLIMPORT __declspec(dllimport)
#    endif
#  else
#    define DLLIMPORT
#  endif
#  ifndef VECTORCall
#    define VECTORCall __attribute__((__fastcall__))
#  endif

typedef void* VectorIter;

typedef struct DLLIMPORT Vector{
   void* a;
   int elesize;
   int back,front,capsize;
   void (*pop_function)(void*);
}Vector;

#  ifdef __cplusplus
extern "C" {
#  endif

/**
 * vector store data by copy (element size) bytes into pointer.
 * if elesize equal 0, it means the vector stores pointer, instead of
 * storing instance.
 * if data type is not pointer(elesize > 0), user should define push_back, insert
 * wrapper, which prepare data first, and invoke push_back/insert by pass the
 * address of the object.
 *
 * you could use setPopFunction() setup the pop function.
 * thus the vector could be a vector contain objects which maintain the
 * destructor automatically.
 *
 * ex:
 *   void vector_push_back_int(Vector* vector,int i){
 *      vector_push_back(vector,&i);
 *   }
 *   void vector_insert_int(Vector* vector,int idx,int val){
 *      vector_insert(vector,idx,&val);
 *   }
 *   int  vector_intVal(Vector* vector,int idx){
 *      return vector_at(vector,idx)
 *   }
 *   void test(){
 *      Vector* intVec = vector_create(sizeof(int));
 *      vector_push_back_int(intVec,rand());
 *      vector_insert_int(intVec,1);
 *      printf("%d ",vector_intVal(intVec,0));
 *      vector_delete(intVec);
 *   }
 *
 */
DLLIMPORT Vector* VECTORCall vector_create(int elesize);

/**
 * the popFunction passed in should be just a finalize function for object.
 * if it is no need to finalize it, just fill 0 to it(default to 0).
 */
DLLIMPORT void       VECTORCall vector_setPopFunction(Vector* a,void(*popFunction)(void*));
DLLIMPORT int        VECTORCall  vector_empty(const Vector* a);
DLLIMPORT int        VECTORCall  vector_size(const Vector* a);
DLLIMPORT void*      VECTORCall  vector_front(const Vector* a);
DLLIMPORT void*      VECTORCall  vector_back(const Vector* a);
DLLIMPORT int        VECTORCall  vector_backidx(const Vector* a);
DLLIMPORT int        VECTORCall  vector_frontidx(const Vector* a);
DLLIMPORT void       VECTORCall  vector_push_back(Vector* a,const void* data);
DLLIMPORT void       VECTORCall  vector_pop_back(Vector* a);
DLLIMPORT void       VECTORCall  vector_push_front(Vector* a,const void* data);
DLLIMPORT void       VECTORCall  vector_pop_front(Vector* a);
DLLIMPORT void       VECTORCall  vector_swap_s(Vector* a,int idx1,int idx2);
DLLIMPORT void       VECTORCall  vector_swap(Vector* a,int idx1,int idx2);
DLLIMPORT void       VECTORCall  vector_insert(Vector* a,int idx,const void* data);
DLLIMPORT void       VECTORCall  vector_erase(Vector* a,int idx);
DLLIMPORT void       VECTORCall  vector_erase_range(Vector* a,int idxBegin,int idxEnd);
DLLIMPORT void*      VECTORCall  vector_at(const Vector* a,int idx);
DLLIMPORT void       VECTORCall  vector_foreach(Vector* a,void(*func)(void* ele));
DLLIMPORT void       VECTORCall  vector_clear(Vector* a);
DLLIMPORT void       VECTORCall  vector_delete(Vector* a);

DLLIMPORT VectorIter VECTORCall vector_get_iter(const Vector* a);
DLLIMPORT void*      VECTORCall vector_iter_next(VectorIter iter);
DLLIMPORT int        VECTORCall vector_iter_hasNext(const VectorIter iter);
DLLIMPORT int        VECTORCall vector_iter_hasPrev(const VectorIter iter);
DLLIMPORT void*      VECTORCall vector_iter_prev(VectorIter iter);
DLLIMPORT void*      VECTORCall vector_iter_data(const VectorIter iter);
DLLIMPORT void       VECTORCall vector_iter_rewind(VectorIter iter);
DLLIMPORT void       VECTORCall vector_iter_delete(VectorIter iter);

DLLIMPORT int        VECTORCall vector_iter_getIdx(const VectorIter iter);
DLLIMPORT Vector*    VECTORCall vector_iter_getVector(const VectorIter iter);
#  ifdef __cplusplus
}
#  endif

#endif
